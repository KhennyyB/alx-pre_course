;; ispell.mim -- English input method with spell checker (ISPELL).
;; Copyright (C) 2003, 2004, 2005, 2009
;;   National Institute of Advanced Industrial Science and Technology (AIST)
;;   Registration Number H15PRO112

;; This file is part of the m17n library.

;; The m17n library is free software; you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation; either version 2.1 of
;; the License, or (at your option) any later version.

;; The m17n library is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with the m17n library; if not, write to the Free
;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

(input-method en ispell)

(description "Input method for English using ISPELL as a spell checker.
It uses the loadable module libmimx-ispell.so to communicate with
ISPELL program.  You can check the spelll of typed word by TAB
key.  Not for an actual use, but for demonstrating what can be
done by the m17n input method.
")

(title "ISPELL")

(module
 (libmimx-ispell ispell_word init fini))

(map
 (alpha
  ("A" "A") ("B" "B") ("C" "C") ("D" "D") ("E" "E") ("F" "F") ("G" "G")
  ("H" "H") ("I" "I") ("J" "J") ("K" "K") ("L" "L") ("M" "M") ("N" "N")
  ("O" "O") ("P" "P") ("Q" "Q") ("R" "R") ("S" "S") ("T" "T") ("U" "U")
  ("V" "V") ("W" "W") ("X" "X") ("Y" "Y") ("Z" "Z")
  ("a" "a") ("b" "b") ("c" "c") ("d" "d") ("e" "e") ("f" "f") ("g" "g")
  ("h" "h") ("i" "i") ("j" "j") ("k" "k") ("l" "l") ("m" "m") ("n" "n")
  ("o" "o") ("p" "p") ("q" "q") ("r" "r") ("s" "s") ("t" "t") ("u" "u")
  ("v" "v") ("w" "w") ("x" "x") ("y" "y") ("z" "z"))
 (ispell
  ((Tab) (call libmimx-ispell ispell_word init select)))

 (change
  ((Left) (select @-))
  ((Right) (select @+))))

(state
 (init
  (alpha (shift alpha)))

 (alpha
  (alpha)
  (ispell))

 (select
  (change)))

;; Local Variables:
;; mode: lisp
;; End:
