;; ORY2-OTF.flt -- Font Layout Table for ory2 OpenType fonts
;; Copyright (C) 2010 AIST (H15PRO112)
;; See the end for copying conditions.

(font layouter ory2-otf nil
      (version "1.6.0")
      (font (nil nil unicode-bmp :otf=ory2)))

;;; <li> ORY2-OTF.flt
;;;
;;; For ory2 OpenType fonts to draw the Oriya script.

;; base blwf b u rphf a pstf p A

(category
 (0x0B00 0x0B7F ?X)			; generic
 (0x0B01	?a)			; SIGN CANDRABINDU
 (0x0B02 0x0B03	?A)			; SIGN ANUSVARA .. VISARGA
 (0x0B05 0x0B14	?V)			; LETTER A .. VOCALIC AU
 (0x0B15 0x0B39	?C)			; LETTER KA .. HA
 (0x0B30	?R)			; LETTER RA
 (0x0B3C	?n)			; SIGN NUKTA
 (0x0B3E	?p)			; VOWEL SIGN AA
 (0x0B3F	?u)			; VOWEL SIGN I
 (0x0B40	?p)			; VOWEL SIGN II
 (0x0B41 0x0B44	?b)			; VOWEL SIGN U .. VOCALIC RR
 (0x0B47	?m)			; VOWEL SIGN E
 (0x0B4D	?H)			; SIGN VIRAMA
 (0x0B56	?u)			; AI LENGTH MARK
 (0x0B57	?p)			; AU LENGTH MARK
 (0x0B5C 0x0B5F	?C)			; LETTER RRA .. YYA
 (0x0B60 0x0B61	?V)			; LETTER VOCALIC RR .. LL
 (0x0B62 0x0B63 ?b)			; VOWEL SIGN VOCALIC L .. LL
 (0x0B71	?C)			; LETTER WA

 (0x200C	?N)			; ZWNJ
 (0x200D	?J)			; ZWJ
 (0x25CC	?X)			; DOTTED CIRCLE

 (rphf		?r)
 (pstf		?P)
 )

;; Stage 0
;; Preprocessing
(generator
 (0
  (cond
   ;; Decompose two-part vowel signs.
   ((0x0B48)
    0x0B47 0x0B56)
   ((0x0B4B)
    0x0B47 0x0B3E)
   ((0x0B4C)
    0x0B47 0x0B57)

   ;; Compose consonant and nukta.
   ((0x0B21 0x0B3C)
    0x0B5C)
   ((0x0B22 0x0B3C)
    0x0B5D)

   ("." =))
  *))

;; Stage 1
;; Syllable identification
(generator
 (0
  (cond
   ;; Syllables with an independent vowel
   ("(RH)?Vn?(J?H[CR])?m?u?b?p?n?a?A?"
    < | = * | >)

   ;; Consonant-based syllables
   ("([CR]n?J?HJ?)*[CR]n?(H[NJ]?|m?u?b?p?n?)a?A?"
    < | = * | >)

   ;; Two-part vowel signs
   ((0x0B47 0x0B56)
    (cond
     ((font-facility 0x25CC) < 0x0B47 0x25CC 0x0B56 >)
     (".+" < 0x0B48 >)))
   ((0x0B47 0x0B3E)
    (cond
     ((font-facility 0x25CC) < 0x0B47 0x25CC 0x0B3E >)
     (".+" < 0x0B4B >)))
   ((0x0B47 0x0B57)
    (cond
     ((font-facility 0x25CC) < 0x0B47 0x25CC 0x0B57 >)
     (".+" < 0x0B4C >)))

   ;; Combining marks are displayed with a DOTTED CIRCLE.
   ("m"
    (cond
     ((font-facility 0x25CC) < = 0x25CC >)
     ("." [ = ])))
   ("[nHubpaA]"
    (cond
     ((font-facility 0x25CC) < 0x25CC = >)
     ("." [ = ])))
   ("JH[CR]"
    (cond
     ((font-facility 0x25CC) < 0x25CC :otf=ory2=blwf,pstf+ >)
     (".+" [ :otf=ory2=blwf,pstf+ ])))

   ("." =))
  *))

;; Stage 2
;; Basic shaping forms and matra reordering
(generator
 (0
  (cond
   ;; Explicit halant form starting with RA + H + ZWJ
   ;; 1            2    3   4
   (" (RHJ[CRnHJ]+)(H)N?(a)?(A)? "
    (1 :otf?ory2=locl,nukt,akhn,blwf,pstf+)
    | (1 b4post) (3 =) (1 post) (2 =) (4 =) |)

   ;; Explicit halant form starting with a reph
   ;; 1   2         3    4   5
   (" (RH)([CRnHJ]+)(H)N?(a)?(A)? "
    (2 :otf?ory2=locl,nukt,akhn,blwf,pstf+)
    | (1 :otf=ory2=rphf+) (2 b4post) (4 =) (2 post) (3 =) (5 =) |)

   ;; Other explicit halant forms
   ;; 1         2    3   4
   (" ([CRnHJ]+)(H)N?(a)?(A)? "
    (1 :otf?ory2=locl,nukt,akhn,blwf,pstf+)
    | (1 b4post) (3 =) (1 post) (2 =) (4 =) |)

   ;; Ordinary syllables starting with RA + H + ZWJ
   ;; 1            2     3       4     5   6
   (" (RHJ[CRnHJ]*)(mn?)?(u?b?n?)(pn?)?(a)?(A)? "
    (1 :otf?ory2=locl,nukt,akhn,blwf,pstf+)
    | (2 = *) (1 b4post) (3 = *) (5 =) (1 post) (4 = *) (6 =) |)

   ;; Ordinary syllables starting with a reph
   ;; 1   2          3     4       5     6   7
   (" (RH)([CRnHJV]+)(mn?)?(u?b?n?)(pn?)?(a)?(A)? "
    (2 :otf?ory2=locl,nukt,akhn,blwf,pstf+)
    | (3 = *) (1 :otf=ory2=rphf+) (2 b4post) (4 = *) (6 =) (2 post)
    (5 = *) (7 =) |)

   ;; Other ordinary syllables
   ;; 1          2     3       4     5   6
   (" ([CRnHJV]+)(mn?)?(u?b?n?)(pn?)?(a)?(A)? "
    (1 :otf?ory2=locl,nukt,akhn,blwf,pstf+)
    | (2 = *) (1 b4post) (3 = *) (5 =) (1 post) (4 = *) (6 =) |)

   ("." =))
  *)

 (b4post
  (cond
   ("([CRnHJP]*[CRV]n?)((J?PP)+)$"
    (1 :otf=ory2=locl,nukt,akhn,blwf,cjct+))
   (".+"
    (0 :otf=ory2=locl,nukt,akhn,blwf,cjct+))))

 (post
  (cond
   ("[CRnHJP]*[CRV]n?((J?PP)+)$"
    (1 :otf=ory2=pstf+))))
 )

;; Stage 3
;; Final reordering #1 (Move pre-base matra after the last halant)
(generator
 (0
  (cond
   ;; 1    2         3
   (" (mn?)([^ ]+HJ?)([^H ]+) "
    | (2 = *) (1 = *) (3 = *) |)

   ("." =))
  *))

;; Stage 4
;; Final reordering #2 (Move reph after the first halant)
(generator
 (0
  (cond
   ;; Syllables with a reph and an explicit halant
   ;; 1     2  3           4
   (" (mn?)?(r)([^HP ]+HJ?)([^ ]*) "
    | (1 = *) (3 = *) (2 =) (4 = *) |)

   ;; A reph without explicit halant
   ;; 1     2  3          4
   (" (mn?)?(r)([^aPpA ]+)(a?P*H?p?n?A?) "
    | (1 = *) (3 = *) (2 =) (4 = *) |)

   ("." =))
  *))

;; Stage 5
;; Nukta for matra and presentation forms
(generator
 (0
  (cond
   (" ([^ ]+) "
    | (1 :otf=ory2=nukt,pres,abvs,blws,psts,haln,calt+) |)

   ("." =))
  *))

;; Stage 6
;; Remove ZWJ
(generator
 (0
  (cond
   ("J")

   ("." =))
  *))

;; Stage 7
;; GPOS processing
(generator
 (0
  (cond
   (" ([^ ]+) "
    (1 :otf=ory2=+kern,dist,abvm,blwm))

   ("." =))
  *))

;; Copyright (C) 2010
;;   National Institute of Advanced Industrial Science and Technology (AIST)
;;   Registration Number H15PRO112

;; This file is part of the m17n database; a sub-part of the m17n
;; library.

;; The m17n library is free software; you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation; either version 2.1 of
;; the License, or (at your option) any later version.

;; The m17n library is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with the m17n library; if not, write to the Free
;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;; Local Variables:
;; mode: emacs-lisp
;; End:
