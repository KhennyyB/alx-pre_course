;; GJR2-OTF.flt -- Font Layout Table for gjr2 OpenType fonts
;; Copyright (C) 2010 AIST (H15PRO112)
;; See the end for copying conditions.

(font layouter gjr2-otf nil
      (version "1.6.0")
      (font (nil nil unicode-bmp :otf=gjr2)))

;;; <li> GJR2-OTF.flt
;;;
;;; For gjr2 OpenType fonts to draw the Gujarati script.  

(category
 ;; X: generic
 ;; V: independent vowel
 ;; C: consonant
 ;; R: RA
 ;; n: NUKTA
 ;; H: HALANT
 ;; m: vowel sign (pre)
 ;; u: vowel sign (above)
 ;; b: vowel sign (below)
 ;; p: vowel sign (post)
 ;; a: vowel modifier (above)
 ;; A: vowel modifier (post)
 ;; N: ZWNJ
 ;; J: ZWJ
 (0x0A80 0x0AFF	?X)			; generic
 (0x0A81 0x0A82	?a)			; SIGN CANDRABINDU .. ANUSVARA
 (0x0A83	?A)			; SIGN VISARGA
 (0x0A85 0x0A94	?V)			; LETTER A .. AU
 (0x0A95 0x0AB9	?C)			; LETTER KA .. HA
 (0x0AB0	?R)			; LETTER RA
 (0x0ABC	?n)			; SIGN NUKTA
 (0x0ABE	?p)			; VOWEL SIGN AA
 (0x0ABF	?m)			; VOWEL SIGN I
 (0x0AC0	?p)			; VOWEL SIGN II
 (0x0AC1 0x0AC4	?b)			; VOWEL SIGN UU .. VOCALIC RR
 (0x0AC5 0x0AC8	?u)			; VOWEL SIGN CANDRA E .. AI
 (0x0AC9 0x0ACC	?p)			; VOWEL SIGN CANDRA O .. AU
 (0x0ACD	?H)			; SIGN VIRAMA
 (0x0AE0 0x0AE1	?V)			; LETTER VOCALIC RR  .. VOCALIC LL
 (0x0AE2 0x0AE3	?b)			; VOWEL SIGN VOCALIC L .. VOCALIC LL

 (0x200C	?N)			; ZWNJ
 (0x200D	?J)			; ZWJ
 (0x25CC	?X)			; DOTTED CIRCLE

 (rphf		?r)
 )

;; Stage 0
;; Syllable identification
(generator
 (0
  (cond
   ;; Syllables with an independent vowel
   ("(RH)?Vn?(J?HR)?m?u?b?p?n?a?A?"
    < | = * | >)

   ;; Consonant-based syllables
   ("([CR]n?J?HJ?)*[CR]n?(H[NJ]?|m?u?b?p?n?)a?A?"
    < | = * | >)

   ;; Combining marks are displayed with a DOTTED CIRCLE.
   ("m"
    (cond
     ((font-facility 0x25CC) < = 0x25CC >)
     ("." [ = ])))
   ("[nHubpaA]"
    (cond
     ((font-facility 0x25CC) < 0x25CC = >)
     ("." [ = ])))
   ("JHR"
    (cond
     ((font-facility 0x25CC) < 0x25CC :otf=gjr2=blwf+ >)
     (".+" [ :otf=gjr2=blwf+ ])))

   ("." =))
  *))

;; Stage 1
;; Basic shaping forms and matra reordering
(generator
 (0
  (cond
   ;; Explicit halant form starting with RA + H + ZWJ
   (" (RHJ[CRnHJ]+)(HN?a?A?) "
    | (1 :otf=gjr2=locl,nukt,akhn,rkrf,blwf,half,vatu,cjct+) (2 = *) |)

   ;; Explicit halant form starting with a reph
   (" (RH)([CRnHJ]+)(HN?a?A?) "
    | (1 :otf=gjr2=rphf+) (2 :otf=gjr2=locl,nukt,akhn,rkrf,blwf,half,vatu,cjct+)
    (3 = *) |)

   ;; Other explicit halant forms
   (" ([CRnHJ]+)(HN?a?A?) "
    | (1 :otf=gjr2=locl,nukt,akhn,rkrf,blwf,half,vatu,cjct+) (2 = *) |)

   ;; Ordinary syllables starting with RA + H + ZWJ
   ;; 1            2     3
   (" (RHJ[CRnHJ]*)(mn?)?(u?b?p?n?a?A?) "
    ;;           |
    ;; This is an asterisk.  (See DEV2-OTF.flt)
    | (2 = *) (1 :otf=gjr2=locl,nukt,akhn,rkrf,blwf,half,vatu,cjct+)
    (3 = *) |)

   ;; Ordinary syllables starting with a reph
   ;; 1   2          3     4
   (" (RH)([CRnHJV]+)(mn?)?(u?b?p?n?a?A?) "
    | (3 = *) (1 :otf=gjr2=rphf+)
    (2 :otf=gjr2=locl,nukt,akhn,rkrf,blwf,half,vatu,cjct+)
    (4 = *) |)
   
   ;; Other ordinary syllables
   ;; 1          2     3
   (" ([CRnHJV]+)(mn?)?(u?b?p?n?a?A?) "
    | (2 = *) (1 :otf=gjr2=locl,nukt,akhn,rkrf,blwf,half,vatu,cjct+)
    (3 = *) |)

   ("." =))
  *))    

;; Stage 2
;; Final reordering #1 (Move pre-base matra after the last halant)
(generator
 (0
  (cond
   ;; 1    2         3
   (" (mn?)([^ ]+HJ?)([^H ]+) "
    | (2 = *) (1 = *) (3 = *) |)

   ("." =))
  *))

;; Stage 3
;; Final reordering #2 (Move reph after the first halant)
(generator
 (0
  (cond
   ;; Syllables with a reph and an explicit halant
   ;; 1     2  3          4
   (" (mn?)?(r)([^H ]+HJ?)([^ ]*) "
    | (1 = *) (3 = *) (2 =) (4 = *) |)

   ;; A reph without explicit halant
   ;; 1     2  3        4
   (" (mn?)?(r)([^aA ]+)(a?A?) "
    | (1 = *) (3 = *) (2 =) (4 = *) |)

   ("." =))
  *))

;; Stage 4
;; Nukta for matra and presentation forms
(generator
 (0
  (cond
   (" ([^ ]+) "
    | (1 :otf=gjr2=nukt,pres,abvs,blws,psts,haln,calt+) |)

   ("." =))
  *))

;; Stage 5
;; Remove ZWNJ/ZWJ
(generator
 (0
  (cond
   ("[NJ]")

   ("." =))
  *))

;; Stage 6
;; GPOS processing
(generator
 (0
  (cond
   (" ([^ ]+) "
    (1 :otf=gjr2=+kern,dist,abvm,blwm))

   ("." =))
  *))

;; Copyright (C) 2010
;;   National Institute of Advanced Industrial Science and Technology (AIST)
;;   Registration Number H15PRO112

;; This file is part of the m17n database; a sub-part of the m17n
;; library.

;; The m17n library is free software; you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation; either version 2.1 of
;; the License, or (at your option) any later version.

;; The m17n library is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with the m17n library; if not, write to the Free
;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;; Local Variables:
;; mode: emacs-lisp
;; End:
